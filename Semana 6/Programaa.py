#Hola profe!, este es mi programa :)

class Animal:
    """Clase base para todos los animales"""

    def __init__(self, nombre):
        self.nombre = nombre
        self._edad = 0  # Atributo encapsulado (por convenci√≥n con _)

    def hacer_sonido(self):
        """M√©todo que ser√° sobrescrito (polimorfismo)"""1
        return "Hace alg√∫n sonido"

    def cumplir_anios(self):
        """M√©todo para incrementar la edad"""
        self._edad += 1
        return f"{self.nombre} ahora tiene {self._edad} a√±os"


class Perro(Animal):
    """Clase derivada que hereda de Animal"""

    def __init__(self, nombre, raza):
        super().__init__(nombre)  # Hereda el constructor
        self.raza = raza

    def hacer_sonido(self):  # Sobrescribe el m√©todo (polimorfismo)
        return "¬°Guau guau!"

    def info(self):
        return f"{self.nombre} es un {self.raza} de {self._edad} a√±os"


#Programa principal
def main():
    print("üê∂ MASCOTA VIRTUAL üê∂")

    # Crear instancia
    mi_perro = Perro("Rex", "Labrador")

    # Men√∫ interactivo
    while True:
        print("\n¬øQu√© quieres hacer?")
        print("1. Escuchar a la mascota")
        print("2. Celebrar cumplea√±os")
        print("3. Ver info")
        print("4. Salir")

        opcion = input("Opci√≥n (1-4): ")

        if opcion == "1":
            print(mi_perro.hacer_sonido())  # Polimorfismo en acci√≥n

        elif opcion == "2":
            print(mi_perro.cumplir_anios())  # Usa atributo encapsulado _edad

        elif opcion == "3":
            print(mi_perro.info())

        elif opcion == "4":
            print("¬°Hasta luego!")
            break

        else:
            print("Opci√≥n no v√°lida")


if __name__ == "__main__":
    main()